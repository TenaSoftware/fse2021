"""
`ausers` views for tena project.

Generated by 'python3 manage.py startapp' using Django 3.1.7.
 * NAME: Wendirad Demelash
 * DATE: April 3, 2021
"""

from django.contrib import messages
from django.contrib.auth import login as auth_login, get_user_model
from django.contrib.auth.views import LoginView as AuthLogin
from django.core.exceptions import ImproperlyConfigured
from django.http import HttpResponseRedirect
from django.views.generic import CreateView, FormView, RedirectView
from django.urls import reverse_lazy
from django.utils.decorators import classonlymethod

from ausers.forms import SignUpForm
from ausers.models import Customer
from ausers.forms import VerficationForm
from ausers.utils import twilio_verify

class SignUpView(CreateView):
    model = Customer
    form_class = SignUpForm
    template_name = 'ausers/signup_form.html'
    success_url = reverse_lazy('verify-customer')

    def form_valid(self, form):
        super().form_valid(form)
        self.object.username = self.object.phone_number
        self.request.session['phone_number'] = self.object.phone_number
        self.object.save()
        twilio_verify.send_verification(self.request.session['phone_number'])
        return HttpResponseRedirect(self.get_success_url())

class VerifyCustomer(FormView):
    form_class = VerficationForm
    template_name = 'ausers/verfication_form.html'

    def get(self, request, *args, **kwargs):
        if request.user.is_authenticated and not request.user.__class__.__name__ == 'User':
            self.request.session['phone_number'] = request.user.phone_number
            twilio_verify.send_verification(self.request.session['phone_number'])
        return super().get(request)

    def get_form(self, form_class=None):
        if form_class is None:
            form_class = self.get_form_class()
        return form_class(self.request, **self.get_form_kwargs())

    def form_valid(self, form):
        phone_number = self.request.session['phone_number']
        status = self.make_verified(phone_number)
        if status:
            form.request.session.pop('phone_number')
            return super().form_valid(form)
        form.add_error(None, 'Something wrong, please try again!')
        return self.form_invalid(form)

    def make_verified(self, phone_number):
        try:
            customer = Customer._default_manager.get_by_natural_key(phone_number)
        except Customer.DoesNotExist:
            return False
        customer.is_verified = True
        customer.save()
        return True

class MessageView(RedirectView):
    url = '/'
    message = None
    level = None

    @classonlymethod
    def as_view(cls, **initkwargs):
        message = initkwargs.get('message', None)
        level = initkwargs.get('level', 'SUCCESS')
        if message is None:
            raise ImproperlyConfigured('Message is not included in kwargs.')
        if level.upper() not in messages.DEFAULT_LEVELS.keys():
            raise ImproperlyConfigured('Unknown level. Level should be one of the following %s.',
                    ', '.join(messages.DEFAULT_LEVELS.keys())
            )
        initkwargs.update({'level': messages.DEFAULT_LEVELS.get(level)})
        return super().as_view(**initkwargs)


    def dispatch(self, request, *args, **kwargs):
        messages.add_message(request, self.level, self.message)
        return super().dispatch(request, *args, **kwargs)

class LoginView(AuthLogin):
    redirect_authenticated_user = True
