"""
`ausers` test for tena project.

Generated by 'python3 manage.py startapp' using Django 3.1.7.
 * NAME: Wendirad Demelash
 * DATE: April 18, 2021
"""

from django.test import TestCase

from ausers.models import Customer, Region, Woreda, Zone


class RegionTest(TestCase):
    def create_region(self, name="test region"):
        return Region.objects.create(name=name)

    def test_region_creation(self):
        region = self.create_region()
        self.assertTrue(isinstance(region, Region))
        self.assertEqual(region.__str__(), region.name)


class ZoneTest(TestCase):
    def create_region(self, name="test-region"):
        return Region.objects.create(name=name)

    def create_zone(self, region, name="test-zone"):
        return Zone.objects.create(region=region, name=name)

    def test_zone_creation(self):
        region = self.create_region()
        zone = self.create_zone(region)
        self.assertTrue(isinstance(zone, Zone))
        self.assertEqual(zone.__str__(), f"{zone.name} | {zone.region.name}")


class WoredaTest(TestCase):
    def create_region(self, name="test-region"):
        return Region.objects.create(name=name)

    def create_zone(self, region, name="test-zone"):
        return Zone.objects.create(region=region, name=name)

    def create_woreda(self, region, zone, name="test-woreda"):
        return Woreda.objects.create(region=region, zone=zone, name=name)

    def test_woreda_creation(self):
        region = self.create_region()
        zone = self.create_zone(region)
        woreda = self.create_woreda(region, zone)
        self.assertTrue(isinstance(woreda, Woreda))
        self.assertEqual(woreda.__str__(), f"{woreda.name} | {woreda.region.name}")


class CustomerTest(TestCase):
    def create_region(self, name="test-region"):
        return Region.objects.create(name=name)

    def create_zone(self, region, name="test-zone"):
        return Zone.objects.create(region=region, name=name)

    def create_woreda(self, region, zone, name="test-woreda"):
        return Woreda.objects.create(region=region, zone=zone, name=name)

    def create_customer(
        self,
        region,
        zone,
        woreda,
        first_name="test-first-name",
        last_name="test-last-name",
    ):
        return Customer.objects.create(
            region=region,
            zone=zone,
            woreda=woreda,
            first_name=first_name,
            last_name=last_name,
        )

    def test_customer_creation(self):
        region = self.create_region()
        zone = self.create_zone(region)
        woreda = self.create_woreda(region, zone)
        customer = self.create_customer(region, zone, woreda)
        self.assertTrue(isinstance(customer, Customer))
        self.assertEqual(customer.__str__(), customer.get_short_name())
